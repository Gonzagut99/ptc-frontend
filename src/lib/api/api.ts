/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/notifications/{userNotificationId}/mark-as-read": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Marcar una notificación como leída */
        put: operations["markAsRead"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Crear un nuevo usuario
         * @description Crea un nuevo usuario con la información proporcionada.
         */
        post: operations["createUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/staff": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Crear un nuevo staff
         * @description Crea un nuevo miembro del personal con la información proporcionada (requiere userId existente).
         */
        post: operations["createStaff"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/staff/with-user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Crear un nuevo usuario con staff
         * @description Crea un nuevo usuario y su staff asociado en una sola operación (relación 1:1).
         */
        post: operations["createUserWithStaff"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/liquidations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Crear una nueva liquidación */
        post: operations["createLiquidation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/liquidations/{liquidationId}/tour-services": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Agregar servicio de tour a la liquidación */
        post: operations["addTourService"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/liquidations/{liquidationId}/payments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Agregar pago a la liquidación */
        post: operations["addPayment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/liquidations/{liquidationId}/incidencies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Agregar incidencia a la liquidación */
        post: operations["addIncidency"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/liquidations/{liquidationId}/hotel-services": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Agregar servicio de hotel a la liquidación */
        post: operations["addHotelService"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/liquidations/{liquidationId}/flight-services": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Agregar servicio de vuelo a la liquidación */
        post: operations["addFlightService"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/liquidations/{liquidationId}/additional-services": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Agregar servicio adicional a la liquidación */
        post: operations["addAdditionalService"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/clientes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Crear un nuevo cliente
         * @description Crea un nuevo cliente con la información proporcionada.
         */
        post: operations["saveCustomers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener usuario por ID
         * @description Obtiene un usuario específico por su ID.
         */
        get: operations["getUserById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/paginados": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener usuarios paginados
         * @description Obtiene una lista paginada de usuarios según la configuración proporcionada.
         */
        get: operations["getPaginatedUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/staff/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener staff por ID
         * @description Obtiene un miembro del personal específico por su ID.
         */
        get: operations["getStaffById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/staff/paginados": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener staff paginado
         * @description Obtiene una lista paginada de personal según la configuración proporcionada.
         */
        get: operations["getPaginatedStaff"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/staff/by-role/{role}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener staff por rol
         * @description Obtiene una lista de personal filtrada por rol.
         */
        get: operations["getStaffByRole"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notifications/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener notificaciones paginadas para un usuario */
        get: operations["getUserNotifications"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notifications/subscribe/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Suscribirse a notificaciones en tiempo real a través de SSE */
        get: operations["subscribe"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/liquidations/{liquidationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener liquidación por ID */
        get: operations["getLiquidationById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/liquidations/status/{status}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener liquidaciones paginadas por estado */
        get: operations["getLiquidationsByStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/liquidations/paginated": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener liquidaciones paginadas */
        get: operations["getPaginatedLiquidations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/liquidations/customer/{customerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener liquidaciones paginadas por ID de cliente */
        get: operations["getLiquidationsByCustomer"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/clientes/paginados": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener clientes paginados
         * @description Obtiene una lista paginada de clientes según la configuración proporcionada.
         */
        get: operations["getPaginatedCustomers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        DNotification: {
            /** Format: int64 */
            id?: number;
            isActive?: boolean;
            /** Format: date-time */
            createdDate?: string;
            /** Format: date-time */
            updatedDate?: string;
            message?: string;
            /** @enum {string} */
            scope?: "ALL" | "SELF" | "OTHERS";
            referenceId?: string;
        };
        DUserNotification: {
            /** Format: int64 */
            id?: number;
            isActive?: boolean;
            /** Format: date-time */
            createdDate?: string;
            /** Format: date-time */
            updatedDate?: string;
            read?: boolean;
            /** Format: int64 */
            userId?: number;
            /** Format: int64 */
            notificationId?: number;
            notification?: components["schemas"]["DNotification"];
        };
        DUser: {
            /** Format: int64 */
            id?: number;
            isActive?: boolean;
            /** Format: date-time */
            createdDate?: string;
            /** Format: date-time */
            updatedDate?: string;
            userName?: string;
            email?: string;
            passwordHash?: string;
        };
        ErrorBody: {
            message?: string;
            /** @enum {string} */
            status?: "100 CONTINUE" | "101 SWITCHING_PROTOCOLS" | "102 PROCESSING" | "103 EARLY_HINTS" | "103 CHECKPOINT" | "200 OK" | "201 CREATED" | "202 ACCEPTED" | "203 NON_AUTHORITATIVE_INFORMATION" | "204 NO_CONTENT" | "205 RESET_CONTENT" | "206 PARTIAL_CONTENT" | "207 MULTI_STATUS" | "208 ALREADY_REPORTED" | "226 IM_USED" | "300 MULTIPLE_CHOICES" | "301 MOVED_PERMANENTLY" | "302 FOUND" | "302 MOVED_TEMPORARILY" | "303 SEE_OTHER" | "304 NOT_MODIFIED" | "305 USE_PROXY" | "307 TEMPORARY_REDIRECT" | "308 PERMANENT_REDIRECT" | "400 BAD_REQUEST" | "401 UNAUTHORIZED" | "402 PAYMENT_REQUIRED" | "403 FORBIDDEN" | "404 NOT_FOUND" | "405 METHOD_NOT_ALLOWED" | "406 NOT_ACCEPTABLE" | "407 PROXY_AUTHENTICATION_REQUIRED" | "408 REQUEST_TIMEOUT" | "409 CONFLICT" | "410 GONE" | "411 LENGTH_REQUIRED" | "412 PRECONDITION_FAILED" | "413 PAYLOAD_TOO_LARGE" | "413 REQUEST_ENTITY_TOO_LARGE" | "414 URI_TOO_LONG" | "414 REQUEST_URI_TOO_LONG" | "415 UNSUPPORTED_MEDIA_TYPE" | "416 REQUESTED_RANGE_NOT_SATISFIABLE" | "417 EXPECTATION_FAILED" | "418 I_AM_A_TEAPOT" | "419 INSUFFICIENT_SPACE_ON_RESOURCE" | "420 METHOD_FAILURE" | "421 DESTINATION_LOCKED" | "422 UNPROCESSABLE_ENTITY" | "423 LOCKED" | "424 FAILED_DEPENDENCY" | "425 TOO_EARLY" | "426 UPGRADE_REQUIRED" | "428 PRECONDITION_REQUIRED" | "429 TOO_MANY_REQUESTS" | "431 REQUEST_HEADER_FIELDS_TOO_LARGE" | "451 UNAVAILABLE_FOR_LEGAL_REASONS" | "500 INTERNAL_SERVER_ERROR" | "501 NOT_IMPLEMENTED" | "502 BAD_GATEWAY" | "503 SERVICE_UNAVAILABLE" | "504 GATEWAY_TIMEOUT" | "505 HTTP_VERSION_NOT_SUPPORTED" | "506 VARIANT_ALSO_NEGOTIATES" | "507 INSUFFICIENT_STORAGE" | "508 LOOP_DETECTED" | "509 BANDWIDTH_LIMIT_EXCEEDED" | "510 NOT_EXTENDED" | "511 NETWORK_AUTHENTICATION_REQUIRED";
            detail?: string;
            callstack?: string;
        };
        CreateUserDto: {
            /** Format: email */
            email: string;
            password: string;
            userName?: string;
        };
        DStaff: {
            /** Format: int64 */
            id?: number;
            isActive?: boolean;
            /** Format: date-time */
            createdDate?: string;
            /** Format: date-time */
            updatedDate?: string;
            phoneNumber?: string;
            /** Format: float */
            salary?: number;
            /** @enum {string} */
            currency?: "PEN" | "USD";
            /** Format: date-time */
            hireDate?: string;
            /** @enum {string} */
            role?: "SALES" | "COUNTER" | "ACCOUNTING" | "OPERATIONS" | "SUPERADMIN" | "SUPPORT";
            /** Format: int64 */
            userId?: number;
            user?: components["schemas"]["DUser"];
        };
        CreateStaffDto: {
            /** Format: int64 */
            userId: number;
            phoneNumber: string;
            /** Format: float */
            salary: number;
            currency: string;
            role: string;
            /** Format: date-time */
            hireDate?: string;
        };
        CreateUserWithStaffDto: {
            /** Format: email */
            email: string;
            password: string;
            userName?: string;
            phoneNumber: string;
            /** Format: float */
            salary: number;
            currency: string;
            role: string;
            /** Format: date-time */
            hireDate?: string;
        };
        CreateLiquidationDto: {
            /** Format: float */
            currency_rate: number;
            /** Format: date-time */
            payment_deadline: string;
            /** Format: int32 */
            companion: number;
            /** Format: int64 */
            customer_id: number;
            /** Format: int64 */
            staff_id: number;
        };
        DAdditionalServices: {
            /** Format: int64 */
            id?: number;
            isActive?: boolean;
            /** Format: date-time */
            createdDate?: string;
            /** Format: date-time */
            updatedDate?: string;
            /** Format: float */
            tariffRate?: number;
            /** @enum {string} */
            currency?: "PEN" | "USD";
            /** Format: int64 */
            liquidationId?: number;
            /** Format: float */
            price?: number;
            /** @enum {string} */
            status?: "PENDING" | "COMPLETED" | "CANCELED";
            pending?: boolean;
            taxed?: boolean;
        };
        DCustomer: {
            /** Format: int64 */
            id?: number;
            isActive?: boolean;
            /** Format: date-time */
            createdDate?: string;
            /** Format: date-time */
            updatedDate?: string;
            firstName?: string;
            lastName?: string;
            email?: string;
            phoneNumber?: string;
            /** Format: date */
            birthDate?: string;
            /** @enum {string} */
            idDocumentType?: "PASSPORT" | "DNI" | "DRIVER_LICENSE" | "RUC" | "CE";
            idDocumentNumber?: string;
            address?: string;
            nationality?: string;
        };
        DFlightBooking: {
            /** Format: int64 */
            id?: number;
            isActive?: boolean;
            /** Format: date-time */
            createdDate?: string;
            /** Format: date-time */
            updatedDate?: string;
            origin?: string;
            destiny?: string;
            /** Format: date-time */
            departureDate?: string;
            /** Format: date-time */
            arrivalDate?: string;
            aeroline?: string;
            aerolineBookingCode?: string;
            costamarBookingCode?: string;
            tktNumbers?: string;
            /** @enum {string} */
            status?: "PENDING" | "COMPLETED" | "CANCELED";
            /** Format: float */
            totalPrice?: number;
            /** @enum {string} */
            currency?: "PEN" | "USD";
            /** Format: int64 */
            flightServiceId?: number;
            pending?: boolean;
        };
        DFlightService: {
            /** Format: int64 */
            id?: number;
            isActive?: boolean;
            /** Format: date-time */
            createdDate?: string;
            /** Format: date-time */
            updatedDate?: string;
            /** Format: float */
            tariffRate?: number;
            /** @enum {string} */
            currency?: "PEN" | "USD";
            /** Format: int64 */
            liquidationId?: number;
            flightBookings?: components["schemas"]["DFlightBooking"][];
            /** Format: int32 */
            bookingCount?: number;
            taxed?: boolean;
        };
        DHotelBooking: {
            /** Format: int64 */
            id?: number;
            isActive?: boolean;
            /** Format: date-time */
            createdDate?: string;
            /** Format: date-time */
            updatedDate?: string;
            /** Format: date-time */
            checkIn?: string;
            /** Format: date-time */
            checkOut?: string;
            hotel?: string;
            room?: string;
            roomDescription?: string;
            /** Format: float */
            priceByNight?: number;
            /** @enum {string} */
            currency?: "PEN" | "USD";
            /** @enum {string} */
            status?: "PENDING" | "COMPLETED" | "CANCELED";
            /** Format: int64 */
            hotelServiceId?: number;
            pending?: boolean;
        };
        DHotelService: {
            /** Format: int64 */
            id?: number;
            isActive?: boolean;
            /** Format: date-time */
            createdDate?: string;
            /** Format: date-time */
            updatedDate?: string;
            /** Format: float */
            tariffRate?: number;
            /** @enum {string} */
            currency?: "PEN" | "USD";
            /** Format: int64 */
            liquidationId?: number;
            hotelBookings?: components["schemas"]["DHotelBooking"][];
            /** Format: int32 */
            bookingCount?: number;
            taxed?: boolean;
        };
        DIncidency: {
            /** Format: int64 */
            id?: number;
            isActive?: boolean;
            /** Format: date-time */
            createdDate?: string;
            /** Format: date-time */
            updatedDate?: string;
            reason?: string;
            /** Format: float */
            amount?: number;
            /** Format: date-time */
            incidencyDate?: string;
            /** @enum {string} */
            incidencyStatus?: "PENDING" | "APPROVED" | "REJECTED";
            /** Format: int64 */
            liquidationId?: number;
            approved?: boolean;
            pending?: boolean;
        };
        DLiquidation: {
            /** Format: int64 */
            id?: number;
            isActive?: boolean;
            /** Format: date-time */
            createdDate?: string;
            /** Format: date-time */
            updatedDate?: string;
            /** Format: float */
            currencyRate?: number;
            /** Format: float */
            totalAmount?: number;
            /** Format: date-time */
            paymentDeadline?: string;
            /** Format: int32 */
            companion?: number;
            /** @enum {string} */
            status?: "IN_QUOTE" | "PENDING" | "ON_COURSE" | "COMPLETED";
            payments?: components["schemas"]["DPayment"][];
            /** @enum {string} */
            paymentStatus?: "PENDING" | "ON_COURSE" | "COMPLETED";
            flightServices?: components["schemas"]["DFlightService"][];
            hotelServices?: components["schemas"]["DHotelService"][];
            tourServices?: components["schemas"]["DTourService"][];
            additionalServices?: components["schemas"]["DAdditionalServices"][];
            /** Format: int64 */
            customerId?: number;
            customer?: components["schemas"]["DCustomer"];
            /** Format: int64 */
            staffId?: number;
            staffOnCharge?: components["schemas"]["DStaff"];
            incidencies?: components["schemas"]["DIncidency"][];
            /** Format: float */
            totalPaid?: number;
            /** Format: float */
            remainingAmount?: number;
            overdue?: boolean;
        };
        DPayment: {
            /** Format: int64 */
            id?: number;
            isActive?: boolean;
            /** Format: date-time */
            createdDate?: string;
            /** Format: date-time */
            updatedDate?: string;
            /** @enum {string} */
            method?: "DEBIT" | "CREDIT" | "YAPE" | "OTHER";
            /** Format: float */
            amount?: number;
            /** Format: int64 */
            liquidationId?: number;
            /** @enum {string} */
            validationStatus?: "PENDING" | "VALID" | "INVALID";
            valid?: boolean;
            pending?: boolean;
        };
        DTour: {
            /** Format: int64 */
            id?: number;
            isActive?: boolean;
            /** Format: date-time */
            createdDate?: string;
            /** Format: date-time */
            updatedDate?: string;
            /** Format: date-time */
            startDate?: string;
            /** Format: date-time */
            endDate?: string;
            title?: string;
            /** Format: float */
            price?: number;
            place?: string;
            /** @enum {string} */
            currency?: "PEN" | "USD";
            /** @enum {string} */
            status?: "PENDING" | "COMPLETED" | "CANCELED";
            /** Format: int64 */
            tourServiceId?: number;
            pending?: boolean;
        };
        DTourService: {
            /** Format: int64 */
            id?: number;
            isActive?: boolean;
            /** Format: date-time */
            createdDate?: string;
            /** Format: date-time */
            updatedDate?: string;
            /** Format: float */
            tariffRate?: number;
            /** @enum {string} */
            currency?: "PEN" | "USD";
            /** Format: int64 */
            liquidationId?: number;
            tours?: components["schemas"]["DTour"][];
            /** Format: int32 */
            tourCount?: number;
            taxed?: boolean;
        };
        AddTourServiceDto: {
            /** Format: float */
            tariff_rate: number;
            is_taxed: boolean;
            currency: string;
            tours: components["schemas"]["TourDto"][];
        };
        TourDto: {
            /** Format: date-time */
            start_date: string;
            /** Format: date-time */
            end_date: string;
            title: string;
            /** Format: float */
            price: number;
            place: string;
            currency: string;
            status: string;
        };
        AddPaymentDto: {
            payment_method: string;
            /** Format: float */
            amount: number;
        };
        AddIncidencyDto: {
            reason: string;
            /** Format: float */
            amount?: number;
            /** Format: date-time */
            incidencyDate: string;
        };
        AddHotelServiceDto: {
            /** Format: float */
            tariff_rate: number;
            is_taxed: boolean;
            currency: string;
            hotel_bookings: components["schemas"]["HotelBookingDto"][];
        };
        HotelBookingDto: {
            /** Format: date-time */
            check_in: string;
            /** Format: date-time */
            check_out: string;
            hotel: string;
            room: string;
            room_description?: string;
            /** Format: float */
            price_by_night: number;
            currency: string;
            status: string;
        };
        AddFlightServiceDto: {
            /** Format: float */
            tariff_rate: number;
            is_taxed: boolean;
            currency: string;
            flight_bookings: components["schemas"]["FlightBookingDto"][];
        };
        FlightBookingDto: {
            origin: string;
            destiny: string;
            /** Format: date-time */
            departure_date: string;
            /** Format: date-time */
            arrival_date: string;
            aeroline: string;
            aeroline_booking_code: string;
            costamar_booking_code?: string;
            tkt_numbers: string;
            status: string;
            /** Format: float */
            total_price: number;
            currency: string;
        };
        AddAdditionalServiceDto: {
            /** Format: float */
            tariff_rate: number;
            is_taxed: boolean;
            currency: string;
            /** Format: float */
            price: number;
            status: string;
        };
        CreateCustomerDto: {
            firstName: string;
            lastName: string;
            /** Format: email */
            email?: string;
            phoneNumber?: string;
            /** Format: date */
            birthDate: string;
            /** @enum {string} */
            idDocumentType: "PASSPORT" | "DNI" | "DRIVER_LICENSE" | "RUC" | "CE";
            idDocumentNumber: string;
            address?: string;
            nationality?: string;
        };
        PaginatedUserRequestDto: {
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            size?: number;
        };
        PageMetadata: {
            /** Format: int64 */
            size?: number;
            /** Format: int64 */
            number?: number;
            /** Format: int64 */
            totalElements?: number;
            /** Format: int64 */
            totalPages?: number;
        };
        PagedModelDUser: {
            content?: components["schemas"]["DUser"][];
            page?: components["schemas"]["PageMetadata"];
        };
        PaginatedStaffRequestDto: {
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            size?: number;
        };
        PagedModelDStaff: {
            content?: components["schemas"]["DStaff"][];
            page?: components["schemas"]["PageMetadata"];
        };
        PaginatedNotificationRequestDto: {
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            size?: number;
        };
        PagedModelDUserNotification: {
            content?: components["schemas"]["DUserNotification"][];
            page?: components["schemas"]["PageMetadata"];
        };
        SseEmitter: {
            /** Format: int64 */
            timeout?: number;
        };
        LiquidationWithDetailsDto: {
            /** Format: int64 */
            id?: number;
            /** Format: int64 */
            customer_id?: number;
            /** Format: int64 */
            staff_id?: number;
            customer?: components["schemas"]["DCustomer"];
            staff_on_charge?: components["schemas"]["DStaff"];
            /** Format: float */
            currency_rate?: number;
            /** Format: float */
            total_amount?: number;
            /** Format: date-time */
            payment_deadline?: string;
            /** Format: int32 */
            companion?: number;
            /** @enum {string} */
            status?: "IN_QUOTE" | "PENDING" | "ON_COURSE" | "COMPLETED";
            /** @enum {string} */
            payment_status?: "PENDING" | "ON_COURSE" | "COMPLETED";
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            payments?: components["schemas"]["DPayment"][];
            flight_services?: components["schemas"]["DFlightService"][];
            hotel_services?: components["schemas"]["DHotelService"][];
            tour_services?: components["schemas"]["DTourService"][];
            additional_services?: components["schemas"]["DAdditionalServices"][];
            incidencies?: components["schemas"]["DIncidency"][];
        };
        PaginatedLiquidationRequestDto: {
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            size?: number;
        };
        PagedModelLiquidationWithDetailsDto: {
            content?: components["schemas"]["LiquidationWithDetailsDto"][];
            page?: components["schemas"]["PageMetadata"];
        };
        PaginatedCustomerRequestDto: {
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            size?: number;
        };
        PagedModelDCustomer: {
            content?: components["schemas"]["DCustomer"][];
            page?: components["schemas"]["PageMetadata"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    markAsRead: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userNotificationId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["DUserNotification"];
                };
            };
        };
    };
    createUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserDto"];
            };
        };
        responses: {
            /** @description Usuario creado exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DUser"];
                };
            };
            /** @description Solicitud inválida */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorBody"];
                };
            };
        };
    };
    createStaff: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateStaffDto"];
            };
        };
        responses: {
            /** @description Staff creado exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DStaff"];
                };
            };
            /** @description Solicitud inválida */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorBody"];
                };
            };
        };
    };
    createUserWithStaff: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserWithStaffDto"];
            };
        };
        responses: {
            /** @description Usuario y staff creados exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DStaff"];
                };
            };
            /** @description Solicitud inválida */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorBody"];
                };
            };
        };
    };
    createLiquidation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateLiquidationDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["DLiquidation"];
                };
            };
        };
    };
    addTourService: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                liquidationId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddTourServiceDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["DLiquidation"];
                };
            };
        };
    };
    addPayment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                liquidationId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddPaymentDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["DLiquidation"];
                };
            };
        };
    };
    addIncidency: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                liquidationId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddIncidencyDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["DLiquidation"];
                };
            };
        };
    };
    addHotelService: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                liquidationId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddHotelServiceDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["DLiquidation"];
                };
            };
        };
    };
    addFlightService: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                liquidationId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddFlightServiceDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["DLiquidation"];
                };
            };
        };
    };
    addAdditionalService: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                liquidationId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddAdditionalServiceDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["DLiquidation"];
                };
            };
        };
    };
    saveCustomers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCustomerDto"];
            };
        };
        responses: {
            /** @description Cliente creado exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DCustomer"];
                };
            };
            /** @description Solicitud inválida */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorBody"];
                };
            };
        };
    };
    getUserById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Usuario encontrado exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["DUser"];
                };
            };
            /** @description Usuario no encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorBody"];
                };
            };
        };
    };
    getPaginatedUsers: {
        parameters: {
            query: {
                requestDto: components["schemas"]["PaginatedUserRequestDto"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista paginada de usuarios obtenida exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PagedModelDUser"];
                };
            };
            /** @description Solicitud inválida */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorBody"];
                };
            };
        };
    };
    getStaffById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Staff encontrado exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["DStaff"];
                };
            };
            /** @description Staff no encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorBody"];
                };
            };
        };
    };
    getPaginatedStaff: {
        parameters: {
            query: {
                requestDto: components["schemas"]["PaginatedStaffRequestDto"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista paginada de staff obtenida exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PagedModelDStaff"];
                };
            };
            /** @description Solicitud inválida */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorBody"];
                };
            };
        };
    };
    getStaffByRole: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                role: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de staff obtenida exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["DStaff"][];
                };
            };
            /** @description Rol inválido */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorBody"];
                };
            };
        };
    };
    getUserNotifications: {
        parameters: {
            query: {
                requestDto: components["schemas"]["PaginatedNotificationRequestDto"];
            };
            header?: never;
            path: {
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PagedModelDUserNotification"];
                };
            };
        };
    };
    subscribe: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/event-stream": components["schemas"]["SseEmitter"];
                };
            };
        };
    };
    getLiquidationById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                liquidationId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LiquidationWithDetailsDto"];
                };
            };
        };
    };
    getLiquidationsByStatus: {
        parameters: {
            query: {
                requestDto: components["schemas"]["PaginatedLiquidationRequestDto"];
            };
            header?: never;
            path: {
                status: "IN_QUOTE" | "PENDING" | "ON_COURSE" | "COMPLETED";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PagedModelLiquidationWithDetailsDto"];
                };
            };
        };
    };
    getPaginatedLiquidations: {
        parameters: {
            query: {
                requestDto: components["schemas"]["PaginatedLiquidationRequestDto"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PagedModelLiquidationWithDetailsDto"];
                };
            };
        };
    };
    getLiquidationsByCustomer: {
        parameters: {
            query: {
                requestDto: components["schemas"]["PaginatedLiquidationRequestDto"];
            };
            header?: never;
            path: {
                customerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PagedModelLiquidationWithDetailsDto"];
                };
            };
        };
    };
    getPaginatedCustomers: {
        parameters: {
            query: {
                requestDto: components["schemas"]["PaginatedCustomerRequestDto"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista paginada de clientes obtenida exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PagedModelDCustomer"];
                };
            };
            /** @description Solicitud inválida */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorBody"];
                };
            };
        };
    };
}
